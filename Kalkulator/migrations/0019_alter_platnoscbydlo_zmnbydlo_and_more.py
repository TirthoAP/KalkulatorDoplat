# Generated by Django 4.2.1 on 2023-05-24 12:06

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('Kalkulator', '0018_delete_mr_delete_platnosc_delete_sankcja_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='platnoscbydlo',
            name='zmnbydlo',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='platnoscchmiel',
            name='dodanechmiel',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia uprawy chmielu nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnoscchmiel',
            name='zmnchmiel',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia zmniejszeń nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnoscjpo',
            name='dodanejpo',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia gospodarstwa nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnoscjpo',
            name='zmnjpo',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia zmniejszeń nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnosckonopie',
            name='dodanekonopie',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia uprawy konopii nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnosckonopie',
            name='zmnkonopie',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia zmniejszeń nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnosckozy',
            name='zmnkozy',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='platnosckrowy',
            name='zmnkrowy',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='platnosclen',
            name='dodanelen',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia uprawy lnu nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnosclen',
            name='zmnlen',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia zmniejszeń nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnoscowce',
            name='zmnowce',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='platnoscp_burak',
            name='dodanep_burak',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia P_Burak nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnoscp_burak',
            name='zmnp_burak',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia zmniejszeń nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnoscp_pas',
            name='dodanep_pas',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia P_PAS nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnoscp_pas',
            name='zmnp_pas',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia zmniejszeń nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnoscp_skrobia',
            name='dodanep_skrobia',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia P_Skrobia nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnoscp_skrobia',
            name='zmnp_skrobia',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia zmniejszeń nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnoscp_str',
            name='dodanep_str',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia P_STR nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnoscp_str',
            name='zmnp_str',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia zmniejszeń nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnoscp_truskawka',
            name='dodanep_trus',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia P_Truskawka nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnoscp_truskawka',
            name='zmnp_trus',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia zmniejszeń nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnoscupp',
            name='dodaneupp',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia UPP nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='platnoscupp',
            name='zmnupp',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia zmniejszeń nie może być wartością ujemną')]),
        ),
        migrations.AlterField(
            model_name='sankcjacc',
            name='dodanecc',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='sankcjaterminowa',
            name='dodaneterm',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.CreateModel(
            name='SankcjaNiezadekl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dodaneniezad', models.CharField(choices=[('0', '0'), ('1', '1'), ('2', '2'), ('3', '3')], default=0, max_length=1)),
                ('uzytkownik', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'SankcjaNiedeklarowane',
                'verbose_name_plural': 'SankcjaNiedeklarowane',
            },
        ),
        migrations.CreateModel(
            name='SankcjaEFA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pow_go', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia P_Truskawka nie może być wartością ujemną')])),
                ('pow_efa', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0, message='Powierzchnia zmniejszeń nie może być wartością ujemną')])),
                ('uzytkownik', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'SankcjaEFA',
                'verbose_name_plural': 'SankcjaEFA',
            },
        ),
        migrations.CreateModel(
            name='PlatnoscTyton',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dodanevirginia', models.PositiveIntegerField(default=0)),
                ('zmnvirginia', models.PositiveIntegerField(default=0)),
                ('wynikvirginia', models.FloatField(default=0)),
                ('uzytkownik', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'PlatnoscVirginia',
                'verbose_name_plural': 'PlatnoscVirginia',
            },
        ),
    ]
